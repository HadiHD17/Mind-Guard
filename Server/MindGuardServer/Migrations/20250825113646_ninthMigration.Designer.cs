// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindGuardServer.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MindGuardServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825113646_ninthMigration")]
    partial class ninthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MindGuardServer.Models.Domain.AI_Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Is_Acknowledged")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Predicted_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Risk_Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tips")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AI_Predictions");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Journal_Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DetectedEmotion")
                        .HasColumnType("text");

                    b.Property<double?>("SentimentScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Journal_Entries");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Mood_Checkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mood_Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mood_Checkins");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Reminder_Time")
                        .HasColumnType("interval");

                    b.Property<bool>("Synced_Calendar")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Routine_Occurence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoutineID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoutineID");

                    b.ToTable("Routine_Occurunces");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Calendar_sync_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDark")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Calendar_sync_enabled = true,
                            CreatedAt = new DateTime(2025, 8, 25, 11, 36, 45, 985, DateTimeKind.Utc).AddTicks(8619),
                            Email = "hadi@gmail.com",
                            FullName = "Hadi Haidar",
                            IsDark = true,
                            Password = "AQAAAAIAAYagAAAAEOOsH2uM/HogIrV9tfG3rvvOPIUkC+nstEFw4ntsPmXnqAtEg7+jSkSwjOyvpzJ8WQ==",
                            PhoneNumber = "81918422",
                            UpdatedAt = new DateTime(2025, 8, 25, 11, 36, 45, 985, DateTimeKind.Utc).AddTicks(8626)
                        });
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Weekly_Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AVG_Sentiment")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Insights")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mood_Trend")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Week_Start_Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Weekly_Summaries");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.AI_Prediction", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.User", "User")
                        .WithMany("Prediction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Journal_Entry", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.User", "User")
                        .WithMany("Journal")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Mood_Checkin", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.User", "User")
                        .WithMany("Mood")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Routine", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.User", "User")
                        .WithMany("Routine")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Routine_Occurence", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.Routine", "Routine")
                        .WithMany("Occurence")
                        .HasForeignKey("RoutineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Weekly_Summary", b =>
                {
                    b.HasOne("MindGuardServer.Models.Domain.User", "User")
                        .WithMany("Summary")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.Routine", b =>
                {
                    b.Navigation("Occurence");
                });

            modelBuilder.Entity("MindGuardServer.Models.Domain.User", b =>
                {
                    b.Navigation("Journal");

                    b.Navigation("Mood");

                    b.Navigation("Prediction");

                    b.Navigation("Routine");

                    b.Navigation("Summary");
                });
#pragma warning restore 612, 618
        }
    }
}
